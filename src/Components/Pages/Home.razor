@page "/"
@using System.ComponentModel.DataAnnotations

<style>
    .w100 {
        width: 100%;
    }

    .calc-result {
        padding: 10px;
        border-radius: 5px;
        background-color: #F2F2F2;
        width: 100%;
    }
</style>

<FluentCard Style="height: inherit;">
    <EditForm Model="DisplayInfo" OnValidSubmit="CalculateScaleFactor">
        <DataAnnotationsValidator />
        <FluentValidationSummary />

        <FluentStack Orientation="Orientation.Vertical">
            <FluentNumberField Class="w100" @bind-Value="DisplayInfo.PixelX" Required>
                Resolution width (pixel)
            </FluentNumberField>
            <FluentNumberField Class="w100" @bind-Value="DisplayInfo.PixelY" Required>
                Resolution height (pixel)
            </FluentNumberField>
            <FluentNumberField Class="w100" @bind-Value="DisplayInfo.Diagonal" Required>
                Screen size (inch)
            </FluentNumberField>

            <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit">Calculate
            </FluentButton>

            @if (hasResult)
            {
                <div class="calc-result">
                    Display width: @displayXFt ft <br/>
                    Display height: @displayYFt ft <br/>
                    Display PPI: @ppi <br/>
                    Suggested scale: @windowsScale (Windows & Linux) <br/>
                    Suggested scale: @appleScale (Apple) 
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <FluentMessageBar Intent="@MessageIntent.Error">
                    @errorMessage
                </FluentMessageBar>
            }
        </FluentStack>
    </EditForm>
</FluentCard>

@code {
    // 自主研发 https://anduin.aiursoft.cn/post/2023/10/11/select-display

    private DisplayInfo DisplayInfo { get; set; }

    private double displayXFt;
    private double displayYFt;
    private double ppi = 0;
    private string appleScale;
    private string windowsScale;

    private bool hasResult;
    private string errorMessage;

    public Home()
    {
        DisplayInfo = new();
    }

    private void CalculateScaleFactor()
    {
        hasResult = false;
        errorMessage = null;

        try
        {

            var result = CalculateDisplaySize(DisplayInfo.PixelX, DisplayInfo.PixelY, DisplayInfo.Diagonal);
            Console.WriteLine($"Display width: {result.Item1} ft");
            Console.WriteLine($"Display height: {result.Item2} ft");

            displayXFt = result.Item1;
            displayYFt = result.Item2;

            var ppi = CalculatePPI(DisplayInfo.PixelX, DisplayInfo.PixelY, DisplayInfo.Diagonal);
            Console.WriteLine($"Display PPI: {ppi}");
            Console.WriteLine($"Suggested scale: {Math.Round(ppi / 96, 2) * 100}% (Windows & Linux)");
            Console.WriteLine($"Suggested scale: {Math.Round(ppi / 72, 2) * 100}% (Apple)");

            this.ppi = ppi;
            appleScale = $"{Math.Round(ppi / 72, 2) * 100}%";
            windowsScale = $"{Math.Round(ppi / 96, 2) * 100}%";

            hasResult = true;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
            hasResult = false;
        }
    }

    private static Tuple<double, double> CalculateDisplaySize(int x, int y, double diagonal)
    {
        double aspectRatio = Math.Sqrt(x * x + y * y);
        double height = y * diagonal / aspectRatio;
        double width = x * diagonal / aspectRatio;
        return Tuple.Create(Math.Round(width, 2), Math.Round(height, 2));
    }

    private static double CalculatePPI(int x, int y, double diagonal)
    {
        double resolution = Math.Sqrt(x * x + y * y);
        double ppi = resolution / diagonal;
        return Math.Round(ppi, 2);
    }
}